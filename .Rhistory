?showtext::font_add_google
library(devtools)
use_build_ignore("Development")
Colors <- list(LightGrey = "#EDEDED",
MediumGrey = "#D0D0D0",
DarkGrey = "#595959",
#---------
Primary = "#054996",
PrimaryLight = "#05499650",
Secondary = "#8e1e39",
SecondaryLight = "#8e1e3950",
Tertiary = "#2B8C88",
TertiaryLight = "#2B8C8850",
Accent = "#960551",
AccentLight = "#96055150")
AlphaPalettes <- list(AlphaPalette_2 <- c(0.5, 0.9),
AlphaPalette_3 <- c(0.2, 0.5, 0.9),
AlphaPalette_4 <- c(0.3, 0.5, 0.7, 0.9),
AlphaPalette_5 <- c(0.4, 0.5, 0.6, 0.7, 0.8))
use_data(Colors)
# Adding function script files
use_r("data")
library(TinkerLab)
devtools::load_all(".")
TinkerLab::Colors
AlphaPalettes <- list(Levels_2 <- c(0.5, 0.9),
Levels_3 <- c(0.2, 0.5, 0.9),
Levels_4 <- c(0.3, 0.5, 0.7, 0.9),
Levels_5 <- c(0.4, 0.5, 0.6, 0.7, 0.8))
use_data(AlphaPalettes)
devtools::load_all(".")
devtools::load_all(".")
library(TinkerLab)
devtools::load_all(".")
Colors <- list(LightGrey = "#EDEDED",
MediumGrey = "#D0D0D0",
DarkGrey = "#595959",
#---------
Primary = "#054996",
PrimaryLight = "#05499650",
Secondary = "#8e1e39",
SecondaryLight = "#8e1e3950",
Tertiary = "#2B8C88",
TertiaryLight = "#2B8C8850",
#---------
Accent = "#960551",
AccentLight = "#96055150",
#---------
BlueNice = "#7EA6E0")
# Save data in .rda-file and make it part of package
use_data(Colors)
# Save data in .rda-file and make it part of package
use_data(Colors, overwrite = TRUE)
use_r("MakePlot_Column")
?waiver
?do.call
devtools::load_all(".")
use_r("MakePlot_BoxViolin")
library(TinkerLab)
devtools::load_all(".")
use_r("GetECDF")
library(devtools)
use_r("GetECDF")
devtools::load_all(".")
use_r("GetSampleQuantiles")
use_package("rlang")
use_package("purrr")
# Set license in description using usethis::
use_ccby_license()
# Set preferred license in description
use_ccby_license()
use_r("GetSampleStatistics")
use_r("ExportPlot")
library(TinkerLab)
?TinkerLab::ExportPlot
devtools::load_all(".")
?TinkerLab::ExportPlot
?TinkerLab::ExportPlot
?TinkerLab::ExportPlot
?TinkerLab::ExportPlot
People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
Calendar <- tibble::tibble(FromID = 1:length(vc_People),
From = vc_People,
To = NULL)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
Calendar <- tibble::tibble(FromID = 1:length(vc_People),
From = vc_People,
To = NULL)
View(Calendar)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("data")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
use_r("ShuffleVector")
library(devtools)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("data")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
use_r("ShuffleVector")
test <- 1:50
sample(test)
?sample
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_People <- sample(vc_People)
Calendar <- Calendar %>%
mutate(To = lead(From))
library(dplyr)
Calendar <- Calendar %>%
mutate(To = lead(From))
View(Calendar)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_From <- sample(vc_People)
?rep
# Shuffle
vc_From <- rep(sample(vc_People), each = 4)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
vc_To <-
vc_People[0]
vc_To <-
vc_People[0]
vc_People[0]
vc_People[1]
4 %% 2
4 %% 3
c(vc_People[2:length(vc_People)], vc_People[1])
vc_People
vc_To <- c(vc_People[2:length(vc_People)], vc_People[1])[1:4]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_r("data")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
use_r("ShiftValues")
devtools::load_all(".")
devtools::load_all(".")
library(TinkerLab)
test <- ShiftValues(vc_People, 1)
vc_People[1:1]
devtools::load_all(".")
test <- ShiftValues(vc_People, 1)
devtools::load_all(".")
test <- ShiftValues(vc_People, 1)
test <- ShiftValues(vc_People, 2)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
View(Calendar)
test <- ShiftValues(vc_People, 6)
2 %% 8
3 %% 8
4 %% 8
devtools::load_all(".")
test <- ShiftValues(vc_People, 6)
test <- ShiftValues(vc_People, 8)
test <- ShiftValues(vc_People, 7)
test <- ShiftValues(vc_People, 6)
test
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
Calendar <- Calendar %>%
add_count(To)
Calendar <- Calendar %>%
summarize(N = n_distinct(To))
Calendar <- Calendar %>%
group_by(To) %>%
summarize(N = n())
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
Calendar <- Calendar %>%
group_by(To) %>%
summarize(N = n())
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
CalendarSum <- Calendar %>%
group_by(To) %>%
summarize(N = n())
7%%6
6%6
6%%6
devtools::load_all(".")
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
rm(ls())
rm(list = ls())
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
test <- ShiftValues(vc_People, 6)
vc_People[1:0]
devtools::load_all(".")
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
test <- ShiftValues(vc_People, 6)
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
CalendarSum <- Calendar %>%
group_by(To) %>%
summarize(N = n())
View(CalendarSum)
View(Calendar)
CalendarShuffled <- Calendar[sample(PairID), ]
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
View(CalendarShuffled)
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID)]
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(Date = 1:24,
PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
# Shuffle pairs
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
# Shuffle pairs again
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
?dplyr::mutate
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
# CalendarSum <- Calendar %>%
#                   group_by(To) %>%
#                   summarize(N = n())
# Shuffle pairs
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
# Shuffle pairs again, repeat line as often as preferred
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
Calendar <- Calendar %>%
dplyr::mutate(Day = 1:24) %>%
dplyr::select(Day, From, To)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
# CalendarSum <- Calendar %>%
#                   group_by(To) %>%
#                   summarize(N = n())
# Shuffle pairs
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
# Shuffle pairs again, repeat line as often as preferred
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
Calendar <- CalendarShuffled %>%
dplyr::mutate(Day = 1:24) %>%
dplyr::select(Day, From, To)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
# CalendarSum <- Calendar %>%
#                   group_by(To) %>%
#                   summarize(N = n())
# Shuffle pairs
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
# Shuffle pairs again, repeat line as often as preferred
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
Calendar <- CalendarShuffled %>%
dplyr::mutate(Day = 1:24) %>%
dplyr::select(Day, From, To)
library(htmltools)
install.packages("htmltools")
install.packages("Rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages(c("askpass", "BayesFactor", "bayestestR", "bit", "blastula", "blob", "bookdown", "broom", "broom.helpers", "BWStest", "cachem", "car", "censored", "checkmate", "chk", "classInt", "clock", "colorspace", "comorbidity", "correlation", "cpp11", "credentials", "crosstalk", "curl", "data.table", "data.tree", "datawizard", "dbplyr", "deldir", "deSolve", "DiagrammeR", "dials", "doBy", "downlit", "dplyr", "DT", "dtplyr", "e1071", "effectsize", "fansi", "fastmap", "forestplot", "Formula", "fs", "future", "future.apply", "gargle", "geometries", "gert", "ggrepel", "ggsci", "ggstatsplot", "ggsurvfit", "ggVennDiagram", "gh", "Gmisc", "gmp", "googledrive", "googlesheets4", "gridpattern", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "influenceR", "insight", "interp", "inum", "ipred", "kSamples", "later", "lava", "libcoin", "lme4", "lubridate", "MatchIt", "MatrixModels", "mboost", "mc2d", "microbenchmark", "minqa", "modeldata", "modelenv", "modelr", "multcompView", "mvtnorm", "nnls", "openssl", "parallelly", "parameters", "parsnip", "partykit", "patchwork", "pbapply", "pbkrtest", "performance", "pkgbuild", "pkgdown", "plotly", "plyr", "PMCMRplus", "polyclip", "prettyunits", "prodlim", "profvis", "progressr", "promises", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "recipes", "rematch", "remotes", "renv", "rlang", "Rmpfr", "rprojroot", "rsample", "rstantools", "rsvg", "Rttf2pt1", "s2", "sf", "sfheaders", "shiny", "slider", "sourcetools", "statsExpressions", "stringi", "survival", "svglite", "sys", "systemfonts", "textshaping", "tidymodels", "tidyverse", "timechange", "tune", "tzdb", "units", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "warp", "webshot", "whisker", "wk", "workflowsets", "WRS2", "XML", "yardstick", "yulab.utils", "zip", "zoo"))
rmarkdown::render("./Development/Calendar.Rmd")
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
install.packages(c("askpass", "BayesFactor", "bayestestR", "bit", "blastula", "blob", "bookdown", "broom", "broom.helpers", "BWStest", "cachem", "car", "censored", "checkmate", "chk", "classInt", "clock", "colorspace", "comorbidity", "correlation", "cpp11", "credentials", "crosstalk", "curl", "data.table", "data.tree", "datawizard", "dbplyr", "deldir", "deSolve", "DiagrammeR", "dials", "doBy", "downlit", "dplyr", "DT", "dtplyr", "e1071", "effectsize", "fansi", "fastmap", "forestplot", "Formula", "fs", "future", "future.apply", "gargle", "geometries", "gert", "ggrepel", "ggsci", "ggstatsplot", "ggsurvfit", "ggVennDiagram", "gh", "Gmisc", "gmp", "googledrive", "googlesheets4", "gridpattern", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "influenceR", "insight", "interp", "inum", "ipred", "kSamples", "later", "lava", "libcoin", "lme4", "lubridate", "MatchIt", "MatrixModels", "mboost", "mc2d", "microbenchmark", "minqa", "modeldata", "modelenv", "modelr", "multcompView", "mvtnorm", "nnls", "openssl", "parallelly", "parameters", "parsnip", "partykit", "patchwork", "pbapply", "pbkrtest", "performance", "pkgbuild", "pkgdown", "plotly", "plyr", "PMCMRplus", "polyclip", "prettyunits", "prodlim", "profvis", "progressr", "promises", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "RcppParallel", "readr", "readxl", "recipes", "rematch", "remotes", "renv", "rlang", "Rmpfr", "rprojroot", "rsample", "rstantools", "rsvg", "Rttf2pt1", "s2", "sf", "sfheaders", "shiny", "slider", "sourcetools", "statsExpressions", "stringi", "survival", "svglite", "sys", "systemfonts", "textshaping", "tidymodels", "tidyverse", "timechange", "tune", "tzdb", "units", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "warp", "webshot", "whisker", "wk", "workflowsets", "WRS2", "XML", "yardstick", "yulab.utils", "zip", "zoo"))
install.packages(duckdb)
install.packages("duckdb")
devtools::load_all(".")
library(TinkerLab)
install.packages("webshot2")
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(gt)
library(TinkerLab)
vc_People <- c("Laura", "Annika", "Anna", "Ylva", "Kevin", "Basti")
# Shuffle
vc_People <- sample(vc_People)
# Shuffle
vc_From <- rep(vc_People, each = 4)
vc_To <- c(ShiftValues(vc_People, 1)[1:4],
ShiftValues(vc_People, 2)[1:4],
ShiftValues(vc_People, 3)[1:4],
ShiftValues(vc_People, 4)[1:4],
ShiftValues(vc_People, 5)[1:4],
ShiftValues(vc_People, 6)[1:4])
Calendar <- tibble::tibble(PairID = 1:length(vc_From),
From = vc_From,
To = vc_To)
# CalendarSum <- Calendar %>%
#                   group_by(To) %>%
#                   summarize(N = n())
# Shuffle pairs
CalendarShuffled <- Calendar[sample(Calendar$PairID), ]
# Shuffle pairs again, repeat line as often as preferred
CalendarShuffled <- CalendarShuffled[sample(CalendarShuffled$PairID), ]
Calendar <- CalendarShuffled %>%
dplyr::mutate(Day = 1:24) %>%
dplyr::select(Day, From, To)
CompleteList <- Calendar %>%
gt::gt() %>%
TinkerLab::gtTheme_Tinker(TableWidth = "70%")
CompleteList %>% gt::gtsave("/Development/CompleteList.png")
CompleteList %>% gt::gtsave("./Development/CompleteList.png")
CompleteList %>% gt::gtsave("./Development/CompleteList.docx")
CompleteList %>% gt::gtsave("./CompleteList.docx")
CompleteList %>% gt::gtsave("./CompleteList.png")
?gtExtras::gtsave_extra
CompleteList %>% gtExtras::gtsave_extra(filename = "CompleteList.png")
CompleteList %>% gtExtras::gtsave_extra(filename = "CompleteList.html")
View(Calendar)
?gtExtras::gtsave_extra
CompleteList %>% gt::gtsave(filename = "FullCalendar.docx")
ListeLaura <- Calendar %>%
filter(From == "Laura") %>%
pull(Day)
CompleteList %>% gt::gtsave(filename = "FullCalendar.docx")
# use_r("data")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
# use_r("ShiftValues")
use_r("XMLtoDB")
library(devtools)
# use_r("data")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
# use_r("ShiftValues")
use_r("XMLtoDB")
# use_r("ExportPlot")
# use_r("GetECDF")
# use_r("GetSampleQuantiles")
# use_r("GetSampleStatistics")
# use_r("ggTheme_Tinker")
# use_r("gtTheme_Tinker")
# use_r("MakePlot_Column")
# use_r("MakePlot_BoxViolin")
# use_r("ShiftValues")
# use_r("XMLtoDB")
use_r("XMLtoDataModel")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("dplyr")
# use_package("ggplot2")
# use_package("gt")
# use_package("gtExtras")
# use_package("purrr")
# use_package("rlang")
# use_package("showtext")
# use_package("sysfonts")
use_package("xml2")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
use_package("DBI")
# Adding package dependencies using usethis::use_package()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# use_package("DBI")
# use_package("dplyr")
use_package("duckdb")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(TinkerLab)
devtools::load_all(".")
library(TinkerLab)
devtools::load_all(".")
library(TinkerLab)
devtools::load_all(".")
library(TinkerLab)
?gt::tab_options
?gt::pct
gt::pct(70)
